def simple_substitution_decrypt(ciphertext):
    substitution_table = {
        '†': 'A', '‡': 'B', '¶': 'C', ')': 'D', '(': 'E',
        ';': 'F', ':': 'G', ']': 'H', '[': 'I', '—': 'J',
        '4': 'K', '8': 'L', '0': 'M', '6': 'N', '2': 'O',
        '5': 'P', '3': 'Q', '?': 'R', '1': 'S', '9': 'T',
        '7': 'U', '*': 'V', '‡‡': 'W', '85': 'X', '48': 'Y',
        '60': 'Z'
    }

    plaintext = ''
    i = 0
    while i < len(ciphertext):
        if i + 2 < len(ciphertext) and ciphertext[i:i+2] in substitution_table:
            plaintext += substitution_table[ciphertext[i:i+2]]
            i += 2
        elif ciphertext[i] in substitution_table:
            plaintext += substitution_table[ciphertext[i]]
            i += 1
        else:
            plaintext += ciphertext[i]
            i += 1

    return plaintext

def main():
    ciphertext = "53‡‡†305))6*;4826)4‡.)4‡);806*;48†8¶60))85;;]8*;:‡8†83 (88)5†;46(;88*96*?;8)‡(;485);5†2:‡(;4956*2(5—4)8¶8* ;4069285);)6†8)4‡‡;1(‡9;48081;8:8‡1;48†85;4)485†528806*81 (‡9;48;(88;4(‡?34;48)4‡;161;:188;‡?"

    decrypted_text = simple_substitution_decrypt(ciphertext)
    print("Decrypted Plaintext:", decrypted_text)

if _name_ == "_main_":
    main()
